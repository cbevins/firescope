{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "SvgFireScope.svelte",
    "SvgFireTable.svelte",
    "Scope.svelte",
    "SvgFireTable.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import BehaviorSelector from '../input/BehaviorSelector.svelte'\n\n  export let width\n  // export let height\n  export let _input\n  export let _output\n\n  function atX(origin, offset, deg) {\n    return origin + offset * Math.sin(deg * Math.PI / 180)\n  }\n  function atY(origin, offset, deg) {\n    return origin - offset * Math.cos(deg * Math.PI / 180)\n  }\n  function opposite(deg) { return deg >= 180 ? deg-180 : deg+180 }\n\n  let aspect = $_input.slopeDirectionAspect.value.base\n  let ellipseValue = $_input.behavior\n  let fireHeadingFromNorth = $_output.fireHeadingFromNorth.value.base\n  let fireBackingFromNorth = opposite(fireHeadingFromNorth)\n  let slope = $_input.slopeSteepnessRatio.value.base\n  let upslope = opposite(aspect)\n  let windFromNorth = $_input.windDirectionSourceFromNorth.value.base\n  let windHeading = opposite(windFromNorth)\n  let windSpeed = $_input.windSpeedAtMidflame.value.base\n  let wind = {visible: 'visible'}\n  let uom = $_input.uomSlate\n  let headingValue, flankingValue, backingValue\n  let headDist = $_output.headingSpreadDistance.value.base\n  let backDist = $_output.backingSpreadDistance.value.base\n\n  // viewport\n  const viewbox = \"0, 0, 130, 130\"\n  let vp = {x1: 0, y1: 0, w: 130, h: 130 }\n  vp.xc = (vp.x1 + vp.w/2)\n  vp.yc = (vp.y1 + vp.h/2)\n  vp.x2 = vp.x1 + vp.w\n  vp.y2 = vp.y1 + vp.h\n  const vpCenter = `translate(${vp.xc}, ${vp.yc})`\n\n  // compass has radius 50 plus margins of 10 for letters\n  let compass = {\n    r: 50, // compass dial radius\n    x: 65,  // compass center x\n    y: 65,  // compass center y\n    fw: 10, // compass font 'W' width\n    major: 10, // major tic length\n    minor: 5  // minor tic length\n  }\n  const center = `translate(${compass.x},${compass.y})`\n  const compassPos = `translate(5,5)`\n  const points = [\n    {deg: 0, text: 'N'},\n    {deg: 45, text: 'NE'},\n    {deg: 90, text: 'E'},\n    {deg: 135, text: 'SE'},\n    {deg: 180, text: 'S'},\n    {deg: 225, text: 'SW'},\n    {deg: 270, text: 'W'},\n    {deg: 315, text: 'NW'}\n  ]\n  points.forEach(p => {\n    p.x = atX(compass.x, compass.r+7, p.deg)\n    p.y = atY(compass.y, compass.r+7, p.deg)\n  })\n\n  // Slope bubble center location\n  let bubble = {x: 0, y: 0}\n  let fire = {x: 0, r: 35}\n\n  // The following is REQUIRED for units auto-updating\n  $: {\n    uom = $_input.uomSlate\n    slope = $_input.slopeSteepnessRatio.value.base\n    aspect = $_input.slopeDirectionAspect.value.base\n    upslope = opposite(aspect)\n\n    bubble.xup = atX(compass.x, compass.r-5, upslope)\n    bubble.yup = atY(compass.y, compass.r-5, upslope)\n    bubble.visible = (slope < 0.01) ? 'hidden' : 'visible'\n\n    windFromNorth = $_input.windDirectionSourceFromNorth.value.base\n    windHeading = opposite(windFromNorth)\n    windSpeed = $_input.windSpeedAtMidflame.value.base\n    wind.xup = atX(compass.x, compass.r-12, windHeading)\n    wind.yup = atY(compass.y, compass.r-12, windHeading)\n    wind.visible = (windSpeed < 0.1) ? 'hidden' : 'visible'\n\n    fireHeadingFromNorth = $_output.fireHeadingFromNorth.value.base\n    fireBackingFromNorth = opposite(fireHeadingFromNorth)\n    fire.x = fire.r / $_output.lengthToWidthRatio.value.base\n    fire.head = {\n      x: atX(compass.x, compass.r-20, fireHeadingFromNorth),\n      y: atY(compass.y, compass.r-20, fireHeadingFromNorth)\n    }\n    fire.back = {\n      x: atX(compass.x, compass.r-20, fireBackingFromNorth),\n      y: atY(compass.y, compass.r-20, fireBackingFromNorth)\n    }\n    fire.lwr = $_output.lengthToWidthRatio.value.base\n    fire.width = -fire.r / fire.lwr\n    fire.flank = {deg: (fireHeadingFromNorth+90)}\n    fire.flank.x = atX(compass.x, fire.width, fire.flank.deg),\n    fire.flank.y = atY(compass.y, fire.width, fire.flank.deg),\n    fire.flank0 = {x: -fire.r, y: width}\n\n    headDist = $_output.headingSpreadDistance.value.base\n    backDist = $_output.backingSpreadDistance.value.base\n    let radius = (backDist + headDist) / 2\n    let ratio = (radius > 0) ? (headDist - radius) / radius : 0\n    fire.ign = {\n      x: 0,\n      y: -fire.r * ratio\n    }\n\n    let ellipseValue = $_input.behavior\n    if (ellipseValue === 'spreadRate') {\n      headingValue = $_output.headingSpreadRate.value[uom].toFixed(0)\n      backingValue = $_output.backingSpreadRate.value[uom].toFixed(0)\n      flankingValue = $_output.flankingSpreadRate.value[uom].toFixed(0)\n    } else if (ellipseValue === 'spreadDistance') {\n      headingValue = $_output.headingSpreadDistance.value[uom].toFixed(0)\n      backingValue = $_output.backingSpreadDistance.value[uom].toFixed(0)\n      flankingValue = $_output.flankingSpreadDistance.value[uom].toFixed(0)\n    } else if (ellipseValue === 'flameLength') {\n      headingValue = $_output.headingFlameLength.value[uom].toFixed(0)\n      backingValue = $_output.backingFlameLength.value[uom].toFixed(0)\n      flankingValue = $_output.flankingFlameLength.value[uom].toFixed(0)\n    } else if (ellipseValue === 'scorchHeight') {\n      headingValue = ($_output.headingScorchHeight.value[uom]).toFixed(0)\n      backingValue = ($_output.backingScorchHeight.value[uom]).toFixed(0)\n      flankingValue = ($_output.flankingScorchHeight.value[uom]).toFixed(0)\n    }\n  }\n</script>\n\n<svg class=\"defs-only\" xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"0\" height=\"0\" style=\"display: block;\">\n  <defs>\n    <symbol id=\"fireCompass\" >\n      <circle r={compass.r} class=\"compass-face\"\n        transform='translate({compass.x},{compass.y})'/>\n      <!-- markers -->\n      {#each points as p}\n        <line\tclass='major-line' y1={compass.r-15} y2={compass.r}\ttransform='{center} rotate({p.deg})'/>\n        <text class='major-text' dominant-baseline=\"middle\" text-anchor=\"middle\"\n          x={p.x} y={p.y}>{p.text}</text>\n        <line\tclass='minor-line' y1={compass.r-10} y2={compass.r}\ttransform='{center} rotate({p.deg+15})'/>\n        <line\tclass='minor-line' y1={compass.r-10} y2={compass.r}\ttransform='{center} rotate({p.deg+30})'/>\n      {/each}\n    </symbol>\n\n    <linearGradient id=\"fireGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n      <stop offset=\"0%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\" />\n      <stop offset=\"100%\" style=\"stop-color:rgb(255,0,0);stop-opacity:1\" />\n    </linearGradient>\n\n    <!-- fire ellipse -->\n    <symbol id='fireEllipse'>\n      <g transform='{center} rotate({fireHeadingFromNorth+180})'>\n        <!-- fire ellipse -->\n        {#each [1, .75, .5, .25] as f}\n          <ellipse cx=\"0\" cy={(1-f)*fire.ign.y} rx={f*fire.x} ry={f*fire.r} fill=\"url(#fireGradient)\" />\n        {/each}\n        <!-- major axis -->\n        <line class='minor-line' x1={-fire.r-2} y1=\"0\" x2={fire.r+2} y2=\"0\"\n          transform='rotate(90)'/>\n        <!-- minor axis -->\n        <line class='minor-line' x1={-fire.width+2} y1=\"0\" x2={fire.width-2} y2=\"0\" />\n        <!-- ignition point -->\n        <circle cx={fire.ign.x} cy={fire.ign.y} r=\"1\" stroke=\"black\" stroke-width=\".5\" fill=\"red\" />\n        <line class='minor-line' x1={fire.ign.x} y1={fire.ign.y}\n          x2={-fire.width} y2=\"0\" />\n        <line class='minor-line' x1={fire.ign.x} y1={fire.ign.y}\n          x2={fire.width} y2=\"0\" />\n      </g>\n    </symbol>\n\n    <symbol id='fireEllipseText'>\n      <text x={fire.head.x} y={fire.head.y} class='compass-text'\n          dominant-baseline=\"middle\" text-anchor=\"middle\">\n        {headingValue}\n      </text>\n      <text x={fire.back.x} y={fire.back.y} class='compass-text'\n          dominant-baseline=\"middle\" text-anchor=\"middle\">\n        {backingValue}\n      </text>\n      <text x={fire.flank.x} y={fire.flank.y} class='compass-text'\n          dominant-baseline=\"middle\" text-anchor=\"middle\">\n        {flankingValue}\n      </text>\n    </symbol>\n\n    <radialGradient id=\"slopeBubbleGradient\"\n        cx=\"50%\" cy=\"50%\" r=\"80%\" fx=\"50%\" fy=\"50%\">\n      <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"0\" />\n      <stop offset=\"100%\" stop-color=\"black\" stop-opacity=\".5\" />\n    </radialGradient>\n\n    <symbol id='slopeBubble'>\n      <g transform='{center} rotate({aspect})'>\n        <ellipse cx=\"0\" cy=\"45\" rx='5' ry='5'\n          style=\"visibility:{bubble.visible};\"\n          fill=\"url(#slopeBubbleGradient)\" />\n        <line class='slope-pointer'\ty1='48' y2='54'\n          style=\"visibility:{bubble.visible};\" />\n      </g>\n    </symbol>\n\n    <symbol id='slopeBubbleText'>\n      <text x={bubble.xup} y={bubble.yup} class='compass-text'\n        dominant-baseline=\"middle\" text-anchor=\"middle\"\n        style=\"visibility:{bubble.visible};\">\n        {(100*slope).toFixed(0)}</text>\n    </symbol>\n\n    <linearGradient id=\"windGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n      <stop offset=\"0%\" style=\"stop-color:rgb(200,200,240);stop-opacity:1\" />\n      <stop offset=\"100%\" style=\"stop-color:blue;stop-opacity:1\" />\n    </linearGradient>\n\n    <symbol id='windNeedle'>\n      <g transform='{center} rotate({windFromNorth})'>\n        <polygon class='wind-needle'\n          style=\"visibility:{wind.visible};\"\n          fill=\"url(#windGradient)\"\n          points=\"0,44 6,38, 4,38, 4,30, -4,30, -4,38, -6,38\" />\n          <!-- points=\"0,42 6,-42 0,-36 -6,-42\" /> -->\n      </g>\n    </symbol>\n\n    <symbol id='windNeedleText'>\n      <text x={wind.xup} y={wind.yup} class='compass-text'\n        dominant-baseline=\"middle\" text-anchor=\"middle\"\n        style=\"visibility:{wind.visible};\">\n          {(windSpeed/88).toFixed()}</text>\n    </symbol>\n  </defs>\n</svg>\n\n<div class='row'>\n  <div class='col'>\n    <div>\n      <svg viewBox={viewbox} width='100%' height='100%' >\n        <use xlink:href=\"#fireCompass\" transform={compassPos}/>\n        <use xlink:href=\"#slopeBubble\" transform={compassPos}/>\n        <use xlink:href=\"#slopeBubbleText\" transform={compassPos}/>\n        <use xlink:href=\"#windNeedle\" transform={compassPos}/>\n        <use xlink:href=\"#windNeedleText\" transform={compassPos}/>\n        <use xlink:href=\"#fireEllipse\" transform={compassPos}/>\n        <use xlink:href=\"#fireEllipseText\" transform={compassPos}/>\n        <use xlink:href=\"#fireBox\" transform='translate(0,0)'/>\n      </svg>\n    </div>\n    <!-- <div class='row'>\n      <div class='col-sm-3'></div>\n      <div class='col'>\n        <BehaviorSelector bind:behavior={$_input.behavior} />\n      </div>\n    </div> -->\n  </div>\n</div>\n\n<style>\n  /* .firescope-box {\n    margin-bottom: 10px;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.48);\n  } */\n  .compass-face {\n\t\tstroke: #333;\n    stroke-opacity: 50%;\n\t\tfill: white;\n\t}\n  .compass-text {\n    font: normal 6px sans-serif;\n  }\n  /* .info-text {\n    font: normal 4px sans-serif;\n  } */\n\t.major-line {\n\t\tstroke: #111;\n\t\tstroke-width: 1;\n\t}\n  .major-text {\n    font: bold 8px sans-serif;\n  }\n\t.minor-line {\n\t\tstroke: #999;\n\t\tstroke-width: 0.5;\n\t}\n\t.slope-pointer {\n\t\tstroke: #f00;\n\t\tstroke-width: 0.5;\n\t}\n</style>\n",
    "<script>\n  import { thousands } from '../../model/format.js'\n\n  export let width\n  export let height\n  export let viewbox\n  export let _input\n  export let _output\n\n  let uom = $_input.uomSlate\n  $: uom = $_input.uomSlate\n</script>\n\n<svg viewBox={viewbox} width={width} height={height} >\n    {#each Object.keys($_output) as key, idx}\n      {#if $_output[key].group != 'Surface Primary'}\n      <!-- {#if $_output[key].group !== prevGroup}\n        <line class='sep-line' x1='0' y1={6*idx+6} x2='80' y2={6*idx+6} />\n        {prevGroup = $_output[key].group}\n      {/if} -->\n      <text x=\"0\" y={6*idx+6} class='firescope-svgtable-info-text'>\n        {$_output[key].group + ' ' +$_output[key].label}</text>\n      <text x=\"50\" y={6*idx+6} class='firescope-svgtable-value-text'>\n        {thousands($_output[key].value[uom], $_output[key].variant.decimals[uom])}</text>\n      <text x=\"70\" y={6*idx+6} class='firescope-svgtable-units-text'>\n        {$_output[key].variant.units[uom]}\n      </text>\n    {/if}\n  {/each}\n</svg>\n\n<style>\n  .firescope-svgtable-info-text {\n    font: normal 4px sans-serif;\n    text-align: left;\n  }\n \t/* .sep-line {\n\t\tstroke: #111;\n\t\tstroke-width: 0.5;\n\t} */\n  .firescope-svgtable-units-text {\n    font: normal italic 4px sans-serif;\n    text-align: right;\n  }\n  .firescope-svgtable-value-text {\n    font: normal 4px sans-serif;\n    text-align: right;\n  }\n</style>\n",
    "<script>\n  import BehaviorSelector from '../input/BehaviorSelector.svelte'\n  import SvgFireTable from './SvgFireTable.svelte'\n\n  export let width\n  export let height\n  export let _input\n  export let _output\n\n  function atX(origin, offset, deg) {\n    return origin + offset * Math.sin(deg * Math.PI / 180)\n  }\n  function atY(origin, offset, deg) {\n    return origin - offset * Math.cos(deg * Math.PI / 180)\n  }\n  function opposite(deg) { return deg >= 180 ? deg-180 : deg+180 }\n\n  let aspect = $_input.slopeDirectionAspect.value.base\n  let ellipseValue = $_input.behavior\n  let fireHeadingFromNorth = $_output.fireHeadingFromNorth.value.base\n  let fireBackingFromNorth = opposite(fireHeadingFromNorth)\n  let slope = $_input.slopeSteepnessRatio.value.base\n  let upslope = opposite(aspect)\n  let windFromNorth = $_input.windDirectionSourceFromNorth.value.base\n  let windHeading = opposite(windFromNorth)\n  let windSpeed = $_input.windSpeedAtMidflame.value.base\n  let wind = {visible: 'visible'}\n  let uom = $_input.uomSlate\n  let headingValue, flankingValue, backingValue\n  let headDist = $_output.headingSpreadDistance.value.base\n  let backDist = $_output.backingSpreadDistance.value.base\n\n  // viewport\n  const viewbox = \"0, 0, 130, 130\"\n  let vp = {x1: 0, y1: 0, w: 130, h: 130 }\n  vp.xc = (vp.x1 + vp.w/2)\n  vp.yc = (vp.y1 + vp.h/2)\n  vp.x2 = vp.x1 + vp.w\n  vp.y2 = vp.y1 + vp.h\n  const vpCenter = `translate(${vp.xc}, ${vp.yc})`\n\n  // compass has radius 50 plus margins of 10 for letters\n  let compass = {\n    r: 50, // compass dial radius\n    x: 65,  // compass center x\n    y: 65,  // compass center y\n    fw: 10, // compass font 'W' width\n    major: 10, // major tic length\n    minor: 5  // minor tic length\n  }\n  const center = `translate(${compass.x},${compass.y})`\n  const compassPos = `translate(5,5)`\n  const points = [\n    {deg: 0, text: 'N'},\n    {deg: 45, text: 'NE'},\n    {deg: 90, text: 'E'},\n    {deg: 135, text: 'SE'},\n    {deg: 180, text: 'S'},\n    {deg: 225, text: 'SW'},\n    {deg: 270, text: 'W'},\n    {deg: 315, text: 'NW'}\n  ]\n  points.forEach(p => {\n    p.x = atX(compass.x, compass.r+7, p.deg)\n    p.y = atY(compass.y, compass.r+7, p.deg)\n  })\n\n  // Slope bubble center location\n  let bubble = {x: 0, y: 0}\n  let fire = {x: 0, r: 35}\n\n  // The following is REQUIRED for units auto-updating\n  $: {\n    uom = $_input.uomSlate\n    slope = $_input.slopeSteepnessRatio.value.base\n    aspect = $_input.slopeDirectionAspect.value.base\n    upslope = opposite(aspect)\n\n    bubble.xup = atX(compass.x, compass.r-5, upslope)\n    bubble.yup = atY(compass.y, compass.r-5, upslope)\n    bubble.visible = (slope < 0.01) ? 'hidden' : 'visible'\n\n    windFromNorth = $_input.windDirectionSourceFromNorth.value.base\n    windHeading = opposite(windFromNorth)\n    windSpeed = $_input.windSpeedAtMidflame.value.base\n    wind.xup = atX(compass.x, compass.r-12, windHeading)\n    wind.yup = atY(compass.y, compass.r-12, windHeading)\n    wind.visible = (windSpeed < 0.1) ? 'hidden' : 'visible'\n\n    fireHeadingFromNorth = $_output.fireHeadingFromNorth.value.base\n    fireBackingFromNorth = opposite(fireHeadingFromNorth)\n    fire.x = fire.r / $_output.lengthToWidthRatio.value.base\n    fire.head = {\n      x: atX(compass.x, compass.r-20, fireHeadingFromNorth),\n      y: atY(compass.y, compass.r-20, fireHeadingFromNorth)\n    }\n    fire.back = {\n      x: atX(compass.x, compass.r-20, fireBackingFromNorth),\n      y: atY(compass.y, compass.r-20, fireBackingFromNorth)\n    }\n    fire.lwr = $_output.lengthToWidthRatio.value.base\n    fire.width = -fire.r / fire.lwr\n    fire.flank = {deg: (fireHeadingFromNorth+90)}\n    fire.flank.x = atX(compass.x, fire.width, fire.flank.deg),\n    fire.flank.y = atY(compass.y, fire.width, fire.flank.deg),\n    fire.flank0 = {x: -fire.r, y: width}\n\n    headDist = $_output.headingSpreadDistance.value.base\n    backDist = $_output.backingSpreadDistance.value.base\n    let radius = (backDist + headDist) / 2\n    let ratio = (radius > 0) ? (headDist - radius) / radius : 0\n    fire.ign = {\n      x: 0,\n      y: -fire.r * ratio\n    }\n\n    let ellipseValue = $_input.behavior\n    if (ellipseValue === 'spreadRate') {\n      headingValue = $_output.headingSpreadRate.value[uom].toFixed(0)\n      backingValue = $_output.backingSpreadRate.value[uom].toFixed(0)\n      flankingValue = $_output.flankingSpreadRate.value[uom].toFixed(0)\n    } else if (ellipseValue === 'spreadDistance') {\n      headingValue = $_output.headingSpreadDistance.value[uom].toFixed(0)\n      backingValue = $_output.backingSpreadDistance.value[uom].toFixed(0)\n      flankingValue = $_output.flankingSpreadDistance.value[uom].toFixed(0)\n    } else if (ellipseValue === 'flameLength') {\n      headingValue = $_output.headingFlameLength.value[uom].toFixed(0)\n      backingValue = $_output.backingFlameLength.value[uom].toFixed(0)\n      flankingValue = $_output.flankingFlameLength.value[uom].toFixed(0)\n    } else if (ellipseValue === 'scorchHeight') {\n      headingValue = ($_output.headingScorchHeight.value[uom]).toFixed(0)\n      backingValue = ($_output.backingScorchHeight.value[uom]).toFixed(0)\n      flankingValue = ($_output.flankingScorchHeight.value[uom]).toFixed(0)\n    }\n  }\n</script>\n\n<svg class=\"defs-only\" xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"0\" height=\"0\" style=\"display: block;\">\n  <defs>\n    <symbol id=\"fireCompass\" >\n      <circle r={compass.r} class=\"compass-face\"\n        transform='translate({compass.x},{compass.y})'/>\n      <!-- markers -->\n      {#each points as p}\n        <line\tclass='major-line' y1={compass.r-15} y2={compass.r}\ttransform='{center} rotate({p.deg})'/>\n        <text class='major-text' dominant-baseline=\"middle\" text-anchor=\"middle\"\n          x={p.x} y={p.y}>{p.text}</text>\n        <line\tclass='minor-line' y1={compass.r-10} y2={compass.r}\ttransform='{center} rotate({p.deg+15})'/>\n        <line\tclass='minor-line' y1={compass.r-10} y2={compass.r}\ttransform='{center} rotate({p.deg+30})'/>\n      {/each}\n    </symbol>\n\n    <symbol id='fireBox'>\n      <line class='minor-line' x1={vp.x1} y1={vp.y1} x2={vp.x1} y2={vp.y2} />\n      <image x=\"0\" y=\"0\" href=\"favicon.png\" height=\"12\" width=\"12\"/>\n      <text x=\"15\" y=\"8\" class='info-text'>FireScope 1.0.0</text>\n    </symbol>\n\n    <linearGradient id=\"fireGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n      <stop offset=\"0%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\" />\n      <stop offset=\"100%\" style=\"stop-color:rgb(255,0,0);stop-opacity:1\" />\n    </linearGradient>\n\n    <!-- fire ellipse -->\n    <symbol id='fireEllipse'>\n      <g transform='{center} rotate({fireHeadingFromNorth+180})'>\n        <!-- fire ellipse -->\n        {#each [1, .75, .5, .25] as f}\n          <ellipse cx=\"0\" cy={(1-f)*fire.ign.y} rx={f*fire.x} ry={f*fire.r} fill=\"url(#fireGradient)\" />\n        {/each}\n        <!-- major axis -->\n        <line class='minor-line' x1={-fire.r-2} y1=\"0\" x2={fire.r+2} y2=\"0\"\n          transform='rotate(90)'/>\n        <!-- minor axis -->\n        <line class='minor-line' x1={-fire.width+2} y1=\"0\" x2={fire.width-2} y2=\"0\" />\n        <!-- ignition point -->\n        <circle cx={fire.ign.x} cy={fire.ign.y} r=\"1\" stroke=\"black\" stroke-width=\".5\" fill=\"red\" />\n        <line class='minor-line' x1={fire.ign.x} y1={fire.ign.y}\n          x2={-fire.width} y2=\"0\" />\n        <line class='minor-line' x1={fire.ign.x} y1={fire.ign.y}\n          x2={fire.width} y2=\"0\" />\n      </g>\n    </symbol>\n\n    <symbol id='fireEllipseText'>\n      <text x={fire.head.x} y={fire.head.y} class='compass-text'\n          dominant-baseline=\"middle\" text-anchor=\"middle\">\n        {headingValue}\n      </text>\n      <text x={fire.back.x} y={fire.back.y} class='compass-text'\n          dominant-baseline=\"middle\" text-anchor=\"middle\">\n        {backingValue}\n      </text>\n      <text x={fire.flank.x} y={fire.flank.y} class='compass-text'\n          dominant-baseline=\"middle\" text-anchor=\"middle\">\n        {flankingValue}\n      </text>\n    </symbol>\n\n    <radialGradient id=\"slopeBubbleGradient\"\n        cx=\"50%\" cy=\"50%\" r=\"80%\" fx=\"50%\" fy=\"50%\">\n      <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"0\" />\n      <stop offset=\"100%\" stop-color=\"black\" stop-opacity=\".5\" />\n    </radialGradient>\n\n    <symbol id='slopeBubble'>\n      <g transform='{center} rotate({aspect})'>\n        <ellipse cx=\"0\" cy=\"45\" rx='5' ry='5'\n          style=\"visibility:{bubble.visible};\"\n          fill=\"url(#slopeBubbleGradient)\" />\n        <line class='slope-pointer'\ty1='48' y2='54'\n          style=\"visibility:{bubble.visible};\" />\n      </g>\n    </symbol>\n\n    <symbol id='slopeBubbleText'>\n      <text x={bubble.xup} y={bubble.yup} class='compass-text'\n        dominant-baseline=\"middle\" text-anchor=\"middle\"\n        style=\"visibility:{bubble.visible};\">\n        {(100*slope).toFixed(0)}</text>\n    </symbol>\n\n    <linearGradient id=\"windGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n      <stop offset=\"0%\" style=\"stop-color:rgb(200,200,240);stop-opacity:1\" />\n      <stop offset=\"100%\" style=\"stop-color:blue;stop-opacity:1\" />\n    </linearGradient>\n\n    <symbol id='windNeedle'>\n      <g transform='{center} rotate({windFromNorth})'>\n        <polygon class='wind-needle'\n          style=\"visibility:{wind.visible};\"\n          fill=\"url(#windGradient)\"\n          points=\"0,44 6,38, 4,38, 4,30, -4,30, -4,38, -6,38\" />\n          <!-- points=\"0,42 6,-42 0,-36 -6,-42\" /> -->\n      </g>\n    </symbol>\n\n    <symbol id='windNeedleText'>\n      <text x={wind.xup} y={wind.yup} class='compass-text'\n        dominant-baseline=\"middle\" text-anchor=\"middle\"\n        style=\"visibility:{wind.visible};\">\n          {(windSpeed/88).toFixed()}</text>\n    </symbol>\n  </defs>\n</svg>\n\n<div class='row'>\n  <div class='col'>\n    <div>\n      <svg viewBox={viewbox} width={width} height={height} >\n        <use xlink:href=\"#fireCompass\" transform={compassPos}/>\n        <use xlink:href=\"#slopeBubble\" transform={compassPos}/>\n        <use xlink:href=\"#slopeBubbleText\" transform={compassPos}/>\n        <use xlink:href=\"#windNeedle\" transform={compassPos}/>\n        <use xlink:href=\"#windNeedleText\" transform={compassPos}/>\n        <use xlink:href=\"#fireEllipse\" transform={compassPos}/>\n        <use xlink:href=\"#fireEllipseText\" transform={compassPos}/>\n        <use xlink:href=\"#fireBox\" transform='translate(0,0)'/>\n      </svg>\n    </div>\n    <div class='row'>\n      <div class='col-sm-3'></div>\n      <div class='col'>\n        <BehaviorSelector bind:behavior={$_input.behavior} />\n      </div>\n    </div>\n  </div>\n  <div class='col'>\n    <SvgFireTable viewbox=\"0, 0, 80, 130\"\n      width={width} height={height} _output={_output} _input={_input}/>\n  </div>\n</div>\n\n<style>\n  /* .firescope-box {\n    margin-bottom: 10px;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.48);\n  } */\n  .compass-face {\n\t\tstroke: #333;\n    stroke-opacity: 50%;\n\t\tfill: white;\n\t}\n  .compass-text {\n    font: normal 6px sans-serif;\n  }\n  .info-text {\n    font: normal 4px sans-serif;\n  }\n\t.major-line {\n\t\tstroke: #111;\n\t\tstroke-width: 1;\n\t}\n  .major-text {\n    font: bold 8px sans-serif;\n  }\n\t.minor-line {\n\t\tstroke: #999;\n\t\tstroke-width: 0.5;\n\t}\n\t.slope-pointer {\n\t\tstroke: #f00;\n\t\tstroke-width: 0.5;\n\t}\n</style>\n",
    "<script>\n  import { thousands } from '../../model/format.js'\n\n  export let width\n  export let height\n  export let viewbox\n  export let _input\n  export let _output\n\n  let uom = $_input.uomSlate\n  $: {\n    uom = $_input.uomSlate\n  }\n</script>\n\n<svg viewBox={viewbox} width={width} height={height} >\n    {#each Object.keys($_output) as key, idx}\n      {#if $_output[key].group != 'Surface Primary'}\n      <!-- {#if $_output[key].group !== prevGroup}\n        <line class='sep-line' x1='0' y1={6*idx+6} x2='80' y2={6*idx+6} />\n        {prevGroup = $_output[key].group}\n      {/if} -->\n      <text x=\"0\" y={6*idx+6} class='firescope-svgtable-info-text'>\n        {$_output[key].group + ' ' +$_output[key].label}</text>\n      <text x=\"50\" y={6*idx+6} class='firescope-svgtable-value-text'>\n        {thousands($_output[key].value[uom], $_output[key].variant.decimals[uom])}</text>\n      <text x=\"70\" y={6*idx+6} class='firescope-svgtable-units-text'>\n        {$_output[key].variant.units[uom]}\n      </text>\n    {/if}\n  {/each}\n</svg>\n\n<style>\n  .firescope-svgtable-info-text {\n    font: normal 4px sans-serif;\n  }\n \t/* .sep-line {\n\t\tstroke: #111;\n\t\tstroke-width: 0.5;\n\t} */\n  .firescope-svgtable-units-text {\n    font: normal italic 4px sans-serif;\n    text-align: right;\n  }\n  .firescope-svgtable-value-text {\n    font: normal 4px sans-serif;\n    text-align: right;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA4QE,aAAa,eAAC,CAAC,AACf,MAAM,CAAE,IAAI,CACV,cAAc,CAAE,GAAG,CACrB,IAAI,CAAE,KAAK,AACZ,CAAC,AACA,aAAa,eAAC,CAAC,AACb,IAAI,CAAE,MAAM,CAAC,GAAG,CAAC,UAAU,AAC7B,CAAC,AAIF,WAAW,eAAC,CAAC,AACZ,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,CAAC,AAChB,CAAC,AACA,WAAW,eAAC,CAAC,AACX,IAAI,CAAE,IAAI,CAAC,GAAG,CAAC,UAAU,AAC3B,CAAC,AACF,WAAW,eAAC,CAAC,AACZ,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,AAClB,CAAC,AACD,cAAc,eAAC,CAAC,AACf,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,AAClB,CAAC;ACrQA,6BAA6B,cAAC,CAAC,AAC7B,IAAI,CAAE,MAAM,CAAC,GAAG,CAAC,UAAU,CAC3B,UAAU,CAAE,IAAI,AAClB,CAAC,AAKD,8BAA8B,cAAC,CAAC,AAC9B,IAAI,CAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAClC,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,8BAA8B,cAAC,CAAC,AAC9B,IAAI,CAAE,MAAM,CAAC,GAAG,CAAC,UAAU,CAC3B,UAAU,CAAE,KAAK,AACnB,CAAC;ACwOD,aAAa,eAAC,CAAC,AACf,MAAM,CAAE,IAAI,CACV,cAAc,CAAE,GAAG,CACrB,IAAI,CAAE,KAAK,AACZ,CAAC,AACA,aAAa,eAAC,CAAC,AACb,IAAI,CAAE,MAAM,CAAC,GAAG,CAAC,UAAU,AAC7B,CAAC,AACD,UAAU,eAAC,CAAC,AACV,IAAI,CAAE,MAAM,CAAC,GAAG,CAAC,UAAU,AAC7B,CAAC,AACF,WAAW,eAAC,CAAC,AACZ,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,CAAC,AAChB,CAAC,AACA,WAAW,eAAC,CAAC,AACX,IAAI,CAAE,IAAI,CAAC,GAAG,CAAC,UAAU,AAC3B,CAAC,AACF,WAAW,eAAC,CAAC,AACZ,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,AAClB,CAAC,AACD,cAAc,eAAC,CAAC,AACf,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,AAClB,CAAC;AC9QA,6BAA6B,eAAC,CAAC,AAC7B,IAAI,CAAE,MAAM,CAAC,GAAG,CAAC,UAAU,AAC7B,CAAC,AAKD,8BAA8B,eAAC,CAAC,AAC9B,IAAI,CAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAClC,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,8BAA8B,eAAC,CAAC,AAC9B,IAAI,CAAE,MAAM,CAAC,GAAG,CAAC,UAAU,CAC3B,UAAU,CAAE,KAAK,AACnB,CAAC"
}